from verbalizing.QuestionDefinition import ManualQuestionDefinition
from armarx_memory.core.MemoryID import MemoryID
from verbalizing.SearchStrategy import SearchStrategy
from util.armarx_util import is_high_level_skill

class ActivitiesDuringTimeSpanQuestionDefinition(ManualQuestionDefinition):
    # generated by GPT-4.1 at 2025_05_12-20_07

    def evaluate_success(self, instance=None, input=None, memory_id=None, search_type=None):
        from datetime import datetime, time
        from dateutil.relativedelta import relativedelta

        def extract_number(text):
            import re
            match = re.search(r'[-+]?\d*\.?\d+', text)
            if match:
                return float(match.group())
            else:
                return 1.0

        def diff_greater_than_n_months(ts1_ms, ts2_ms, months=1):
            dt1 = datetime.fromtimestamp(ts1_ms / 1e6)
            dt2 = datetime.fromtimestamp(ts2_ms / 1e6)
            dt1, dt2 = sorted([dt1, dt2])
            dt1_plus_n_months = dt1 + relativedelta(months=months)
            return dt2 < dt1_plus_n_months

        current_time = datetime.now()
        timestamp = int(current_time.timestamp() * 1_000_000)
        instance_timestamp = instance.metadata.timeStored

        timespan_text = input[0]
        factor = extract_number(timespan_text)

        if "second" in timespan_text.lower():
            return timestamp - instance_timestamp <= (1_000_000 * factor)
        elif "minute" in timespan_text.lower():
            return timestamp - instance_timestamp <= (60_000_000 * factor)
        elif "hour" in timespan_text.lower():
            return timestamp - instance_timestamp <= (3_600_000_000 * factor)
        elif "day" in timespan_text.lower():
            return timestamp - instance_timestamp <= ((3_600_000_000 * 24) * factor)
        elif "month" in timespan_text.lower():
            return diff_greater_than_n_months(timestamp, instance_timestamp, factor)
        elif "year" in timespan_text.lower():
            return diff_greater_than_n_months(timestamp, instance_timestamp, factor * 12)
        return False

        
    def evaluate_return(self, instance=None, input=None):
        instance = list(instance.values())[0]
        # instance is a list of entity snapshots
        from util.armarx_util import calculate_current_timestamp, calculate_time_difference

        actions = []
        now_timestamp = calculate_current_timestamp()
        # input[0] contains the natural language time span, e.g., "5 minutes"
        for i in instance:
            # get time of skill execution
            time_skill = i.metadata.timeStored
            if calculate_time_difference(input[0], now_timestamp, time_skill):
                # Check if this snapshot contains a skill
                if "skillId" in i.data.to_primitive() and "skillName" in i.data.to_primitive()["skillId"]:
                    skill_name = i.data.to_primitive()["skillId"]["skillName"]
                    if is_high_level_skill(i.data.to_primitive()) and skill_name not in actions:
                        actions.append(skill_name)
        return actions
    
    def set_up(self, model, args: dict=None):
        super().set_up(model, args)
        self.question:str = "What did you do during the last <0>?"
        self.search_id:MemoryID = [MemoryID.from_string("Skill/SkillEvent")]
        self.search_strategy:SearchStrategy = SearchStrategy.DURING
        self.answer_sentence:str = "During the last <0>, I executed the following skills [:]."

        print("Set-Up complete")