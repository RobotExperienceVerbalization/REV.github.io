from datetime import datetime
from verbalizing.QuestionDefinition import ManualQuestionDefinition
from armarx_memory.core.MemoryID import MemoryID
from verbalizing.SearchStrategy import SearchStrategy
from util.armarx_util import get_object_id_for_spoken_name, get_location_id_for_spoken_name

class LastSeenAtLocationObjectQuestionDefinition(ManualQuestionDefinition):
    # generated by GPT-4.1 at 2025_05_12-19_38, extended by spoken names of locations and objects

    def evaluate_success(self, instance=None, input=None, memory_id=None, search_type=None):
        if self.object_id is None:
            self.object_id = get_object_id_for_spoken_name(input[0])  # this line originally was generated as self.object_id = input[0]
            print("Object id set as", self.object_id)
        if self.location_id is None:
            self.location_id = get_location_id_for_spoken_name(input[1]) # this line originally was generated as self.location_id = input[1]
            print("Location id:", self.location_id)
        try:
            object_name = input[0]
            location_name = input[1]
            objects = instance.data.to_primitive()["objects"]
            for obj_key in objects:
                obj = objects[obj_key]
                # Check object name semantic match
                if 'id' in obj:
                    if self.semantic_matching_model.semantic_similarity(obj['id'], self.object_id, 0.6):
                        print("Found matching object:", obj)
                        # Check if the object is at the required location
                        if 'objectAt' in obj:
                            if self.semantic_matching_model.semantic_similarity(self.location_id, obj['objectAt'], 0.6):
                                # Assume the snapshot as last observation and that timeStored is when it was stored
                                self.object_id = obj['id']
                                self.location_id = obj['objectAt']
                                if hasattr(instance.metadata, "timeStored"):
                                    print("Object", input[0], "at", input[1])
                                    return True
            return False
        except Exception:
            return False
        
    def evaluate_return(self, instance=None, input=None):
        instance = list(instance.values())[0]
        data = instance.data.to_primitive()
        print("Object ID:", self.object_id)
        if self.object_id in data["objects"]:
            object_info = data["objects"][self.object_id]
            print(object_info)
            if "objectAt" in object_info and self.semantic_matching_model.semantic_similarity(object_info["objectAt"], self.location_id, 0.6):
                print("Found entry")
                time_of_observation = instance.metadata.timeStored
                return datetime.fromtimestamp(int(time_of_observation)/1e6).strftime("%A, %d %B %Y at %H:%M")
        return None
    
    def set_up(self, model, args: dict=None):
        super().set_up(model, args)
        self.object_id = None
        self.location_id = None
        self.question:str = "When did you last see the <0> at <1>?"
        self.search_id:MemoryID = [MemoryID.from_string("SymbolicScene/SymbolicSceneDescription")]
        self.search_strategy:SearchStrategy = SearchStrategy.LATEST
        self.answer_sentence:str = "I last saw the <0> at <1> at [0]"

        print("Set-Up complete")